<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.shop</groupId>
	<artifactId>shop</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>shop</name>
	<description>Shop project for Spring Boot</description>
	<properties>
		<java.version>1.8</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

<!--		보통 웹사이트를 만들려면 header, footer, menu 등 공통적인 페이지 구성 요소들이 있다. 이런 영역들을 각각의 페이지마다 같은 소스코드를
불러온다면 변경이 일어날 때마다 이를 포함하고 있는 모든 페이지를 수정해야 할 것이다. Thymeleaf의 페이지 레이아웃 기능을 이용한다면 공통 요소 관리를 쉽게
적용해 준다.-->
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
			<version>2.5.1</version>
		</dependency>
<!--Spring 시큐리티 설정 추가하기-->
<!--		애플리케이션 보안에는 중요한 두 가지 영역 인증/인가가 있다.
웹에서 인증이란? 해당 리소스에 대해서 작업을 수행할 수 있는 주체인지 확인하는 것이다. 예를 들어 어떤 커뮤니티 게시판의 글을 보는 것은
로그인을 하지 않아도 되지만, 댓글을 작성하려면 로그인을 해야 한다. 댓글을 달기 위해서는 로그인이라는 인증 절차를 거쳐야한다.
인가는 인증 과정 이후에 일어나는데 커뮤니티를 관리하는 관리자 페이지에 접근하는 URL을 입력했을 때 해당 URL은 커뮤니티 관리자만 접근할
수있어야한다. 이때 접근하는 사용자가 해당 URL에 대해서 인가된 회원인지를 검사하는 것이다. 인가된 유저라면 해당 URLdㅔ 대한 권한이
있기 때문에 접근이 가능하다 4장에서는 접근 권한 부여 서비스를 구현해본다-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

<!--		회원가입 처리하기 : 유효한 값인지 판단하는 소스가 여러 군데 흩어지면 관리하기가 힘들다. 자바 빈 밸리데이션을 이용하면
객체의 값을 효율적으로 검증할 수 있다.-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>



		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--		querydsl-->
		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-jpa</artifactId>
			<version>4.3.1</version>
		</dependency>
		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>4.3.1</version>
		</dependency>

<!--		화면 이용없이 Spring Security를 테스트 하는 방법-->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
			<version>${spring-security.version}</version>
		</dependency>

<!--		178p 현재 로그인을 해도 메뉴바에는 로그인이라는 메뉴가 나타난다 로그인 상태라면 "로그아웃"이라는 메뉴가 나타나야 로그인 된 상태
임을 알 수 있고, 다른 아이디로 로그인하려면 로그아웃 해야한다. 또 상품 등록 메뉴의 경우 관리자만 상품을 등록할 수 있도록 노출돼야 한다.
 이를 도와주는 라이브러리 springsecurity5를 추가한다.-->
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity5</artifactId>
		</dependency>
<!--상품을 등록할 때는 화면으로부터 전달받은 DTO 객체를 엔티티 객체로 변환하는 작업을 해야 하고, 상품을 조회할 때는 엔티티 객체를 DTO 객체로
바꿔주는 작업을 해야한다. 이작업은 반복적인 작업이고, 시간이 오래 걸린다. 이를 도와주는 라이브러리가 밑의 modelmapper이다.
이 라이브러리는 서로 다른 클래스의 값을 필드의 이름과 자료형이 같으면 게터, 세터를 통해 값을 복사해 객체를 반환해준다.-->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>2.3.9</version>
		</dependency>



		<!--		Spring Boot Devtools-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/java</outputDirectory>
							<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>


